/*
 * THIS FILE IS AUTOGENERATED BY build.rs
 * MODIFICATIONS WILL BE OVERWRITTEN
 */
/// Represents a statistic that doesn't fall under the main categories
#[derive(Clone, Copy, Eq, PartialEq, Debug)]
pub enum CustomStatistic {
    LeaveGame = 0,
    PlayTime = 1,
    TotalWorldTime = 2,
    TimeSinceDeath = 3,
    TimeSinceRest = 4,
    SneakTime = 5,
    WalkOneCm = 6,
    CrouchOneCm = 7,
    SprintOneCm = 8,
    WalkOnWaterOneCm = 9,
    FallOneCm = 10,
    ClimbOneCm = 11,
    FlyOneCm = 12,
    WalkUnderWaterOneCm = 13,
    MinecartOneCm = 14,
    BoatOneCm = 15,
    PigOneCm = 16,
    HorseOneCm = 17,
    AviateOneCm = 18,
    SwimOneCm = 19,
    StriderOneCm = 20,
    Jump = 21,
    Drop = 22,
    DamageDealt = 23,
    DamageDealtAbsorbed = 24,
    DamageDealtResisted = 25,
    DamageTaken = 26,
    DamageBlockedByShield = 27,
    DamageAbsorbed = 28,
    DamageResisted = 29,
    Deaths = 30,
    MobKills = 31,
    AnimalsBred = 32,
    PlayerKills = 33,
    FishCaught = 34,
    TalkedToVillager = 35,
    TradedWithVillager = 36,
    EatCakeSlice = 37,
    FillCauldron = 38,
    UseCauldron = 39,
    CleanArmor = 40,
    CleanBanner = 41,
    CleanShulkerBox = 42,
    InteractWithBrewingstand = 43,
    InteractWithBeacon = 44,
    InspectDropper = 45,
    InspectHopper = 46,
    InspectDispenser = 47,
    PlayNoteblock = 48,
    TuneNoteblock = 49,
    PotFlower = 50,
    TriggerTrappedChest = 51,
    OpenEnderchest = 52,
    EnchantItem = 53,
    PlayRecord = 54,
    InteractWithFurnace = 55,
    InteractWithCraftingTable = 56,
    OpenChest = 57,
    SleepInBed = 58,
    OpenShulkerBox = 59,
    OpenBarrel = 60,
    InteractWithBlastFurnace = 61,
    InteractWithSmoker = 62,
    InteractWithLectern = 63,
    InteractWithCampfire = 64,
    InteractWithCartographyTable = 65,
    InteractWithLoom = 66,
    InteractWithStonecutter = 67,
    BellRing = 68,
    RaidTrigger = 69,
    RaidWin = 70,
    InteractWithAnvil = 71,
    InteractWithGrindstone = 72,
    TargetHit = 73,
    InteractWithSmithingTable = 74,
}

use std::convert::TryFrom;
impl TryFrom<u32> for CustomStatistic {
    type Error = crate::Error;
    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            x if x == Self::LeaveGame as u32 => Ok(Self::LeaveGame),
            x if x == Self::PlayTime as u32 => Ok(Self::PlayTime),
            x if x == Self::TotalWorldTime as u32 => Ok(Self::TotalWorldTime),
            x if x == Self::TimeSinceDeath as u32 => Ok(Self::TimeSinceDeath),
            x if x == Self::TimeSinceRest as u32 => Ok(Self::TimeSinceRest),
            x if x == Self::SneakTime as u32 => Ok(Self::SneakTime),
            x if x == Self::WalkOneCm as u32 => Ok(Self::WalkOneCm),
            x if x == Self::CrouchOneCm as u32 => Ok(Self::CrouchOneCm),
            x if x == Self::SprintOneCm as u32 => Ok(Self::SprintOneCm),
            x if x == Self::WalkOnWaterOneCm as u32 => Ok(Self::WalkOnWaterOneCm),
            x if x == Self::FallOneCm as u32 => Ok(Self::FallOneCm),
            x if x == Self::ClimbOneCm as u32 => Ok(Self::ClimbOneCm),
            x if x == Self::FlyOneCm as u32 => Ok(Self::FlyOneCm),
            x if x == Self::WalkUnderWaterOneCm as u32 => Ok(Self::WalkUnderWaterOneCm),
            x if x == Self::MinecartOneCm as u32 => Ok(Self::MinecartOneCm),
            x if x == Self::BoatOneCm as u32 => Ok(Self::BoatOneCm),
            x if x == Self::PigOneCm as u32 => Ok(Self::PigOneCm),
            x if x == Self::HorseOneCm as u32 => Ok(Self::HorseOneCm),
            x if x == Self::AviateOneCm as u32 => Ok(Self::AviateOneCm),
            x if x == Self::SwimOneCm as u32 => Ok(Self::SwimOneCm),
            x if x == Self::StriderOneCm as u32 => Ok(Self::StriderOneCm),
            x if x == Self::Jump as u32 => Ok(Self::Jump),
            x if x == Self::Drop as u32 => Ok(Self::Drop),
            x if x == Self::DamageDealt as u32 => Ok(Self::DamageDealt),
            x if x == Self::DamageDealtAbsorbed as u32 => Ok(Self::DamageDealtAbsorbed),
            x if x == Self::DamageDealtResisted as u32 => Ok(Self::DamageDealtResisted),
            x if x == Self::DamageTaken as u32 => Ok(Self::DamageTaken),
            x if x == Self::DamageBlockedByShield as u32 => Ok(Self::DamageBlockedByShield),
            x if x == Self::DamageAbsorbed as u32 => Ok(Self::DamageAbsorbed),
            x if x == Self::DamageResisted as u32 => Ok(Self::DamageResisted),
            x if x == Self::Deaths as u32 => Ok(Self::Deaths),
            x if x == Self::MobKills as u32 => Ok(Self::MobKills),
            x if x == Self::AnimalsBred as u32 => Ok(Self::AnimalsBred),
            x if x == Self::PlayerKills as u32 => Ok(Self::PlayerKills),
            x if x == Self::FishCaught as u32 => Ok(Self::FishCaught),
            x if x == Self::TalkedToVillager as u32 => Ok(Self::TalkedToVillager),
            x if x == Self::TradedWithVillager as u32 => Ok(Self::TradedWithVillager),
            x if x == Self::EatCakeSlice as u32 => Ok(Self::EatCakeSlice),
            x if x == Self::FillCauldron as u32 => Ok(Self::FillCauldron),
            x if x == Self::UseCauldron as u32 => Ok(Self::UseCauldron),
            x if x == Self::CleanArmor as u32 => Ok(Self::CleanArmor),
            x if x == Self::CleanBanner as u32 => Ok(Self::CleanBanner),
            x if x == Self::CleanShulkerBox as u32 => Ok(Self::CleanShulkerBox),
            x if x == Self::InteractWithBrewingstand as u32 => Ok(Self::InteractWithBrewingstand),
            x if x == Self::InteractWithBeacon as u32 => Ok(Self::InteractWithBeacon),
            x if x == Self::InspectDropper as u32 => Ok(Self::InspectDropper),
            x if x == Self::InspectHopper as u32 => Ok(Self::InspectHopper),
            x if x == Self::InspectDispenser as u32 => Ok(Self::InspectDispenser),
            x if x == Self::PlayNoteblock as u32 => Ok(Self::PlayNoteblock),
            x if x == Self::TuneNoteblock as u32 => Ok(Self::TuneNoteblock),
            x if x == Self::PotFlower as u32 => Ok(Self::PotFlower),
            x if x == Self::TriggerTrappedChest as u32 => Ok(Self::TriggerTrappedChest),
            x if x == Self::OpenEnderchest as u32 => Ok(Self::OpenEnderchest),
            x if x == Self::EnchantItem as u32 => Ok(Self::EnchantItem),
            x if x == Self::PlayRecord as u32 => Ok(Self::PlayRecord),
            x if x == Self::InteractWithFurnace as u32 => Ok(Self::InteractWithFurnace),
            x if x == Self::InteractWithCraftingTable as u32 => Ok(Self::InteractWithCraftingTable),
            x if x == Self::OpenChest as u32 => Ok(Self::OpenChest),
            x if x == Self::SleepInBed as u32 => Ok(Self::SleepInBed),
            x if x == Self::OpenShulkerBox as u32 => Ok(Self::OpenShulkerBox),
            x if x == Self::OpenBarrel as u32 => Ok(Self::OpenBarrel),
            x if x == Self::InteractWithBlastFurnace as u32 => Ok(Self::InteractWithBlastFurnace),
            x if x == Self::InteractWithSmoker as u32 => Ok(Self::InteractWithSmoker),
            x if x == Self::InteractWithLectern as u32 => Ok(Self::InteractWithLectern),
            x if x == Self::InteractWithCampfire as u32 => Ok(Self::InteractWithCampfire),
            x if x == Self::InteractWithCartographyTable as u32 => Ok(Self::InteractWithCartographyTable),
            x if x == Self::InteractWithLoom as u32 => Ok(Self::InteractWithLoom),
            x if x == Self::InteractWithStonecutter as u32 => Ok(Self::InteractWithStonecutter),
            x if x == Self::BellRing as u32 => Ok(Self::BellRing),
            x if x == Self::RaidTrigger as u32 => Ok(Self::RaidTrigger),
            x if x == Self::RaidWin as u32 => Ok(Self::RaidWin),
            x if x == Self::InteractWithAnvil as u32 => Ok(Self::InteractWithAnvil),
            x if x == Self::InteractWithGrindstone as u32 => Ok(Self::InteractWithGrindstone),
            x if x == Self::TargetHit as u32 => Ok(Self::TargetHit),
            x if x == Self::InteractWithSmithingTable as u32 => Ok(Self::InteractWithSmithingTable),
            _ => Err(Self::Error::EnumOutOfBound)
        }
    }
}
