/*
 * THIS FILE IS AUTOGENERATED BY build.rs
 * MODIFICATIONS WILL BE OVERWRITTEN
 */

#[derive(Clone, Copy, Eq, PartialEq, Debug)]
pub enum VillagerProfession {
    None = 0,
    Armorer = 1,
    Butcher = 2,
    Cartographer = 3,
    Cleric = 4,
    Farmer = 5,
    Fisherman = 6,
    Fletcher = 7,
    Leatherworker = 8,
    Librarian = 9,
    Mason = 10,
    Nitwit = 11,
    Shepherd = 12,
    Toolsmith = 13,
    Weaponsmith = 14,
}

use std::convert::TryFrom;
impl TryFrom<u32> for VillagerProfession {
    type Error = crate::Error;
    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            x if x == Self::None as u32 => Ok(Self::None),
            x if x == Self::Armorer as u32 => Ok(Self::Armorer),
            x if x == Self::Butcher as u32 => Ok(Self::Butcher),
            x if x == Self::Cartographer as u32 => Ok(Self::Cartographer),
            x if x == Self::Cleric as u32 => Ok(Self::Cleric),
            x if x == Self::Farmer as u32 => Ok(Self::Farmer),
            x if x == Self::Fisherman as u32 => Ok(Self::Fisherman),
            x if x == Self::Fletcher as u32 => Ok(Self::Fletcher),
            x if x == Self::Leatherworker as u32 => Ok(Self::Leatherworker),
            x if x == Self::Librarian as u32 => Ok(Self::Librarian),
            x if x == Self::Mason as u32 => Ok(Self::Mason),
            x if x == Self::Nitwit as u32 => Ok(Self::Nitwit),
            x if x == Self::Shepherd as u32 => Ok(Self::Shepherd),
            x if x == Self::Toolsmith as u32 => Ok(Self::Toolsmith),
            x if x == Self::Weaponsmith as u32 => Ok(Self::Weaponsmith),
            _ => Err(Self::Error::EnumOutOfBound)
        }
    }
}
