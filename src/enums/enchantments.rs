/*
 * THIS FILE IS AUTOGENERATED BY build.rs
 * MODIFICATIONS WILL BE OVERWRITTEN
 */

#[derive(Clone, Copy, Eq, PartialEq, Debug)]
pub enum Enchantment {
    Protection = 0,
    FireProtection = 1,
    FeatherFalling = 2,
    BlastProtection = 3,
    ProjectileProtection = 4,
    Respiration = 5,
    AquaAffinity = 6,
    Thorns = 7,
    DepthStrider = 8,
    FrostWalker = 9,
    BindingCurse = 10,
    SoulSpeed = 11,
    SwiftSneak = 12,
    Sharpness = 13,
    Smite = 14,
    BaneOfArthropods = 15,
    Knockback = 16,
    FireAspect = 17,
    Looting = 18,
    Sweeping = 19,
    Efficiency = 20,
    SilkTouch = 21,
    Unbreaking = 22,
    Fortune = 23,
    Power = 24,
    Punch = 25,
    Flame = 26,
    Infinity = 27,
    LuckOfTheSea = 28,
    Lure = 29,
    Loyalty = 30,
    Impaling = 31,
    Riptide = 32,
    Channeling = 33,
    Multishot = 34,
    QuickCharge = 35,
    Piercing = 36,
    Mending = 37,
    VanishingCurse = 38,
}

use std::convert::TryFrom;
impl TryFrom<u32> for Enchantment {
    type Error = crate::Error;
    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            x if x == Self::Protection as u32 => Ok(Self::Protection),
            x if x == Self::FireProtection as u32 => Ok(Self::FireProtection),
            x if x == Self::FeatherFalling as u32 => Ok(Self::FeatherFalling),
            x if x == Self::BlastProtection as u32 => Ok(Self::BlastProtection),
            x if x == Self::ProjectileProtection as u32 => Ok(Self::ProjectileProtection),
            x if x == Self::Respiration as u32 => Ok(Self::Respiration),
            x if x == Self::AquaAffinity as u32 => Ok(Self::AquaAffinity),
            x if x == Self::Thorns as u32 => Ok(Self::Thorns),
            x if x == Self::DepthStrider as u32 => Ok(Self::DepthStrider),
            x if x == Self::FrostWalker as u32 => Ok(Self::FrostWalker),
            x if x == Self::BindingCurse as u32 => Ok(Self::BindingCurse),
            x if x == Self::SoulSpeed as u32 => Ok(Self::SoulSpeed),
            x if x == Self::SwiftSneak as u32 => Ok(Self::SwiftSneak),
            x if x == Self::Sharpness as u32 => Ok(Self::Sharpness),
            x if x == Self::Smite as u32 => Ok(Self::Smite),
            x if x == Self::BaneOfArthropods as u32 => Ok(Self::BaneOfArthropods),
            x if x == Self::Knockback as u32 => Ok(Self::Knockback),
            x if x == Self::FireAspect as u32 => Ok(Self::FireAspect),
            x if x == Self::Looting as u32 => Ok(Self::Looting),
            x if x == Self::Sweeping as u32 => Ok(Self::Sweeping),
            x if x == Self::Efficiency as u32 => Ok(Self::Efficiency),
            x if x == Self::SilkTouch as u32 => Ok(Self::SilkTouch),
            x if x == Self::Unbreaking as u32 => Ok(Self::Unbreaking),
            x if x == Self::Fortune as u32 => Ok(Self::Fortune),
            x if x == Self::Power as u32 => Ok(Self::Power),
            x if x == Self::Punch as u32 => Ok(Self::Punch),
            x if x == Self::Flame as u32 => Ok(Self::Flame),
            x if x == Self::Infinity as u32 => Ok(Self::Infinity),
            x if x == Self::LuckOfTheSea as u32 => Ok(Self::LuckOfTheSea),
            x if x == Self::Lure as u32 => Ok(Self::Lure),
            x if x == Self::Loyalty as u32 => Ok(Self::Loyalty),
            x if x == Self::Impaling as u32 => Ok(Self::Impaling),
            x if x == Self::Riptide as u32 => Ok(Self::Riptide),
            x if x == Self::Channeling as u32 => Ok(Self::Channeling),
            x if x == Self::Multishot as u32 => Ok(Self::Multishot),
            x if x == Self::QuickCharge as u32 => Ok(Self::QuickCharge),
            x if x == Self::Piercing as u32 => Ok(Self::Piercing),
            x if x == Self::Mending as u32 => Ok(Self::Mending),
            x if x == Self::VanishingCurse as u32 => Ok(Self::VanishingCurse),
            _ => Err(Self::Error::EnumOutOfBound)
        }
    }
}
