/*
 * THIS FILE IS AUTOGENERATED BY build.rs
 * MODIFICATIONS WILL BE OVERWRITTEN
 */

#[derive(Clone, Copy, Eq, PartialEq, Debug)]
pub enum Particle {
    AmbientEntityEffect = 0,
    AngryVillager = 1,
    Block = 2,
    BlockMarker = 3,
    Bubble = 4,
    Cloud = 5,
    Crit = 6,
    DamageIndicator = 7,
    DragonBreath = 8,
    DrippingLava = 9,
    FallingLava = 10,
    LandingLava = 11,
    DrippingWater = 12,
    FallingWater = 13,
    Dust = 14,
    DustColorTransition = 15,
    Effect = 16,
    ElderGuardian = 17,
    EnchantedHit = 18,
    Enchant = 19,
    EndRod = 20,
    EntityEffect = 21,
    ExplosionEmitter = 22,
    Explosion = 23,
    SonicBoom = 24,
    FallingDust = 25,
    Firework = 26,
    Fishing = 27,
    Flame = 28,
    SculkSoul = 29,
    SculkCharge = 30,
    SculkChargePop = 31,
    SoulFireFlame = 32,
    Soul = 33,
    Flash = 34,
    HappyVillager = 35,
    Composter = 36,
    Heart = 37,
    InstantEffect = 38,
    Item = 39,
    Vibration = 40,
    ItemSlime = 41,
    ItemSnowball = 42,
    LargeSmoke = 43,
    Lava = 44,
    Mycelium = 45,
    Note = 46,
    Poof = 47,
    Portal = 48,
    Rain = 49,
    Smoke = 50,
    Sneeze = 51,
    Spit = 52,
    SquidInk = 53,
    SweepAttack = 54,
    TotemOfUndying = 55,
    Underwater = 56,
    Splash = 57,
    Witch = 58,
    BubblePop = 59,
    CurrentDown = 60,
    BubbleColumnUp = 61,
    Nautilus = 62,
    Dolphin = 63,
    CampfireCosySmoke = 64,
    CampfireSignalSmoke = 65,
    DrippingHoney = 66,
    FallingHoney = 67,
    LandingHoney = 68,
    FallingNectar = 69,
    FallingSporeBlossom = 70,
    Ash = 71,
    CrimsonSpore = 72,
    WarpedSpore = 73,
    SporeBlossomAir = 74,
    DrippingObsidianTear = 75,
    FallingObsidianTear = 76,
    LandingObsidianTear = 77,
    ReversePortal = 78,
    WhiteAsh = 79,
    SmallFlame = 80,
    Snowflake = 81,
    DrippingDripstoneLava = 82,
    FallingDripstoneLava = 83,
    DrippingDripstoneWater = 84,
    FallingDripstoneWater = 85,
    GlowSquidInk = 86,
    Glow = 87,
    WaxOn = 88,
    WaxOff = 89,
    ElectricSpark = 90,
    Scrape = 91,
    Shriek = 92,
}

use std::convert::TryFrom;
impl TryFrom<u32> for Particle {
    type Error = crate::Error;
    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            x if x == Self::AmbientEntityEffect as u32 => Ok(Self::AmbientEntityEffect),
            x if x == Self::AngryVillager as u32 => Ok(Self::AngryVillager),
            x if x == Self::Block as u32 => Ok(Self::Block),
            x if x == Self::BlockMarker as u32 => Ok(Self::BlockMarker),
            x if x == Self::Bubble as u32 => Ok(Self::Bubble),
            x if x == Self::Cloud as u32 => Ok(Self::Cloud),
            x if x == Self::Crit as u32 => Ok(Self::Crit),
            x if x == Self::DamageIndicator as u32 => Ok(Self::DamageIndicator),
            x if x == Self::DragonBreath as u32 => Ok(Self::DragonBreath),
            x if x == Self::DrippingLava as u32 => Ok(Self::DrippingLava),
            x if x == Self::FallingLava as u32 => Ok(Self::FallingLava),
            x if x == Self::LandingLava as u32 => Ok(Self::LandingLava),
            x if x == Self::DrippingWater as u32 => Ok(Self::DrippingWater),
            x if x == Self::FallingWater as u32 => Ok(Self::FallingWater),
            x if x == Self::Dust as u32 => Ok(Self::Dust),
            x if x == Self::DustColorTransition as u32 => Ok(Self::DustColorTransition),
            x if x == Self::Effect as u32 => Ok(Self::Effect),
            x if x == Self::ElderGuardian as u32 => Ok(Self::ElderGuardian),
            x if x == Self::EnchantedHit as u32 => Ok(Self::EnchantedHit),
            x if x == Self::Enchant as u32 => Ok(Self::Enchant),
            x if x == Self::EndRod as u32 => Ok(Self::EndRod),
            x if x == Self::EntityEffect as u32 => Ok(Self::EntityEffect),
            x if x == Self::ExplosionEmitter as u32 => Ok(Self::ExplosionEmitter),
            x if x == Self::Explosion as u32 => Ok(Self::Explosion),
            x if x == Self::SonicBoom as u32 => Ok(Self::SonicBoom),
            x if x == Self::FallingDust as u32 => Ok(Self::FallingDust),
            x if x == Self::Firework as u32 => Ok(Self::Firework),
            x if x == Self::Fishing as u32 => Ok(Self::Fishing),
            x if x == Self::Flame as u32 => Ok(Self::Flame),
            x if x == Self::SculkSoul as u32 => Ok(Self::SculkSoul),
            x if x == Self::SculkCharge as u32 => Ok(Self::SculkCharge),
            x if x == Self::SculkChargePop as u32 => Ok(Self::SculkChargePop),
            x if x == Self::SoulFireFlame as u32 => Ok(Self::SoulFireFlame),
            x if x == Self::Soul as u32 => Ok(Self::Soul),
            x if x == Self::Flash as u32 => Ok(Self::Flash),
            x if x == Self::HappyVillager as u32 => Ok(Self::HappyVillager),
            x if x == Self::Composter as u32 => Ok(Self::Composter),
            x if x == Self::Heart as u32 => Ok(Self::Heart),
            x if x == Self::InstantEffect as u32 => Ok(Self::InstantEffect),
            x if x == Self::Item as u32 => Ok(Self::Item),
            x if x == Self::Vibration as u32 => Ok(Self::Vibration),
            x if x == Self::ItemSlime as u32 => Ok(Self::ItemSlime),
            x if x == Self::ItemSnowball as u32 => Ok(Self::ItemSnowball),
            x if x == Self::LargeSmoke as u32 => Ok(Self::LargeSmoke),
            x if x == Self::Lava as u32 => Ok(Self::Lava),
            x if x == Self::Mycelium as u32 => Ok(Self::Mycelium),
            x if x == Self::Note as u32 => Ok(Self::Note),
            x if x == Self::Poof as u32 => Ok(Self::Poof),
            x if x == Self::Portal as u32 => Ok(Self::Portal),
            x if x == Self::Rain as u32 => Ok(Self::Rain),
            x if x == Self::Smoke as u32 => Ok(Self::Smoke),
            x if x == Self::Sneeze as u32 => Ok(Self::Sneeze),
            x if x == Self::Spit as u32 => Ok(Self::Spit),
            x if x == Self::SquidInk as u32 => Ok(Self::SquidInk),
            x if x == Self::SweepAttack as u32 => Ok(Self::SweepAttack),
            x if x == Self::TotemOfUndying as u32 => Ok(Self::TotemOfUndying),
            x if x == Self::Underwater as u32 => Ok(Self::Underwater),
            x if x == Self::Splash as u32 => Ok(Self::Splash),
            x if x == Self::Witch as u32 => Ok(Self::Witch),
            x if x == Self::BubblePop as u32 => Ok(Self::BubblePop),
            x if x == Self::CurrentDown as u32 => Ok(Self::CurrentDown),
            x if x == Self::BubbleColumnUp as u32 => Ok(Self::BubbleColumnUp),
            x if x == Self::Nautilus as u32 => Ok(Self::Nautilus),
            x if x == Self::Dolphin as u32 => Ok(Self::Dolphin),
            x if x == Self::CampfireCosySmoke as u32 => Ok(Self::CampfireCosySmoke),
            x if x == Self::CampfireSignalSmoke as u32 => Ok(Self::CampfireSignalSmoke),
            x if x == Self::DrippingHoney as u32 => Ok(Self::DrippingHoney),
            x if x == Self::FallingHoney as u32 => Ok(Self::FallingHoney),
            x if x == Self::LandingHoney as u32 => Ok(Self::LandingHoney),
            x if x == Self::FallingNectar as u32 => Ok(Self::FallingNectar),
            x if x == Self::FallingSporeBlossom as u32 => Ok(Self::FallingSporeBlossom),
            x if x == Self::Ash as u32 => Ok(Self::Ash),
            x if x == Self::CrimsonSpore as u32 => Ok(Self::CrimsonSpore),
            x if x == Self::WarpedSpore as u32 => Ok(Self::WarpedSpore),
            x if x == Self::SporeBlossomAir as u32 => Ok(Self::SporeBlossomAir),
            x if x == Self::DrippingObsidianTear as u32 => Ok(Self::DrippingObsidianTear),
            x if x == Self::FallingObsidianTear as u32 => Ok(Self::FallingObsidianTear),
            x if x == Self::LandingObsidianTear as u32 => Ok(Self::LandingObsidianTear),
            x if x == Self::ReversePortal as u32 => Ok(Self::ReversePortal),
            x if x == Self::WhiteAsh as u32 => Ok(Self::WhiteAsh),
            x if x == Self::SmallFlame as u32 => Ok(Self::SmallFlame),
            x if x == Self::Snowflake as u32 => Ok(Self::Snowflake),
            x if x == Self::DrippingDripstoneLava as u32 => Ok(Self::DrippingDripstoneLava),
            x if x == Self::FallingDripstoneLava as u32 => Ok(Self::FallingDripstoneLava),
            x if x == Self::DrippingDripstoneWater as u32 => Ok(Self::DrippingDripstoneWater),
            x if x == Self::FallingDripstoneWater as u32 => Ok(Self::FallingDripstoneWater),
            x if x == Self::GlowSquidInk as u32 => Ok(Self::GlowSquidInk),
            x if x == Self::Glow as u32 => Ok(Self::Glow),
            x if x == Self::WaxOn as u32 => Ok(Self::WaxOn),
            x if x == Self::WaxOff as u32 => Ok(Self::WaxOff),
            x if x == Self::ElectricSpark as u32 => Ok(Self::ElectricSpark),
            x if x == Self::Scrape as u32 => Ok(Self::Scrape),
            x if x == Self::Shriek as u32 => Ok(Self::Shriek),
            _ => Err(Self::Error::EnumOutOfBound)
        }
    }
}
